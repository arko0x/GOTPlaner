// <auto-generated />
using System;
using GOTPlaner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GOTPlaner.Migrations
{
    [DbContext(typeof(GotContext))]
    [Migration("20220123135917_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("GOTPlaner.Models.Badge", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BadgeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivalDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TouristEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("BadgeTypeId");

                    b.HasIndex("TouristEmail");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("GOTPlaner.Models.BadgeType", b =>
                {
                    b.Property<int>("BadgeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BadgeTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BadgeTypes");

                    b.HasData(
                        new
                        {
                            BadgeTypeId = 1,
                            Name = "Popularna"
                        },
                        new
                        {
                            BadgeTypeId = 2,
                            Name = "MalaBrazowa"
                        },
                        new
                        {
                            BadgeTypeId = 3,
                            Name = "MalaSrebrna"
                        },
                        new
                        {
                            BadgeTypeId = 4,
                            Name = "MalaZlota"
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.CloseSegment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SegmentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SegmentID");

                    b.ToTable("CloseSegments");
                });

            modelBuilder.Entity("GOTPlaner.Models.ElementType", b =>
                {
                    b.Property<int>("ElementTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ElementTypeId");

                    b.ToTable("ElementTypes");

                    b.HasData(
                        new
                        {
                            ElementTypeId = 1,
                            Name = "SystemType"
                        },
                        new
                        {
                            ElementTypeId = 2,
                            Name = "UserType"
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.Leader", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disability")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IDCard")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Email");

                    b.HasIndex("IDCard")
                        .IsUnique();

                    b.ToTable("Leaders");

                    b.HasData(
                        new
                        {
                            Email = "leader@localhost",
                            BirthDate = new DateTime(1978, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disability = false,
                            FirstName = "Michał",
                            IDCard = 112,
                            LastName = "Głuś"
                        },
                        new
                        {
                            Email = "leader2@localhost",
                            BirthDate = new DateTime(1978, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disability = false,
                            FirstName = "Kamil",
                            IDCard = 997,
                            LastName = "Zdun"
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.LeaderPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LeaderEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MountainGroupId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LeaderEmail");

                    b.HasIndex("MountainGroupId");

                    b.ToTable("LeaderPermissions");
                });

            modelBuilder.Entity("GOTPlaner.Models.MountainGroup", b =>
                {
                    b.Property<int>("MountainGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("MountainGroupId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MountainGroups");

                    b.HasData(
                        new
                        {
                            MountainGroupId = 1,
                            Name = "Sudety"
                        },
                        new
                        {
                            MountainGroupId = 2,
                            Name = "GorySwietokrzyskie"
                        },
                        new
                        {
                            MountainGroupId = 3,
                            Name = "BeskidyWschodnie"
                        },
                        new
                        {
                            MountainGroupId = 4,
                            Name = "BeskidyZachodnie"
                        },
                        new
                        {
                            MountainGroupId = 5,
                            Name = "TatryIPodtatrze"
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.MountainRange", b =>
                {
                    b.Property<int>("MountainRangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("MountainRangeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MountainRanges");

                    b.HasData(
                        new
                        {
                            MountainRangeId = 1,
                            Name = "PogorzeCiechowickie"
                        },
                        new
                        {
                            MountainRangeId = 2,
                            Name = "BeskidNiskiWschod"
                        },
                        new
                        {
                            MountainRangeId = 3,
                            Name = "BeskidNiskiZachod"
                        },
                        new
                        {
                            MountainRangeId = 4,
                            Name = "Bieszczady"
                        },
                        new
                        {
                            MountainRangeId = 5,
                            Name = "PogorzeStrzyzowskoDynowskie"
                        },
                        new
                        {
                            MountainRangeId = 6,
                            Name = "PogorzePrzemyskie"
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.Segment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ElementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LevelDifferenceSum")
                        .HasColumnType("int");

                    b.Property<double>("NumberOfKilometers")
                        .HasColumnType("double");

                    b.Property<int>("PointsAB")
                        .HasColumnType("int");

                    b.Property<int?>("PointsBA")
                        .HasColumnType("int");

                    b.Property<int>("TouristPointAId")
                        .HasColumnType("int");

                    b.Property<int>("TouristPointBId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ElementTypeId");

                    b.HasIndex("TouristPointBId");

                    b.HasIndex("TouristPointAId", "TouristPointBId")
                        .IsUnique();

                    b.ToTable("Segments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ElementTypeId = 1,
                            LevelDifferenceSum = 435,
                            NumberOfKilometers = 4.0999999999999996,
                            PointsAB = 7,
                            PointsBA = 8,
                            TouristPointAId = 1,
                            TouristPointBId = 2
                        },
                        new
                        {
                            ID = 2,
                            ElementTypeId = 1,
                            LevelDifferenceSum = 212,
                            NumberOfKilometers = 2.3999999999999999,
                            PointsAB = 5,
                            TouristPointAId = 2,
                            TouristPointBId = 3
                        },
                        new
                        {
                            ID = 3,
                            ElementTypeId = 1,
                            LevelDifferenceSum = 56,
                            NumberOfKilometers = 3.1000000000000001,
                            PointsAB = 5,
                            PointsBA = 4,
                            TouristPointAId = 3,
                            TouristPointBId = 4
                        },
                        new
                        {
                            ID = 4,
                            ElementTypeId = 1,
                            LevelDifferenceSum = 24,
                            NumberOfKilometers = 1.6000000000000001,
                            PointsAB = 1,
                            PointsBA = 1,
                            TouristPointAId = 4,
                            TouristPointBId = 5
                        },
                        new
                        {
                            ID = 5,
                            ElementTypeId = 1,
                            LevelDifferenceSum = 111,
                            NumberOfKilometers = 6.0,
                            PointsAB = 8,
                            PointsBA = 8,
                            TouristPointAId = 2,
                            TouristPointBId = 6
                        },
                        new
                        {
                            ID = 6,
                            ElementTypeId = 1,
                            LevelDifferenceSum = 256,
                            NumberOfKilometers = 5.2999999999999998,
                            PointsAB = 12,
                            PointsBA = 11,
                            TouristPointAId = 6,
                            TouristPointBId = 5
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.SegmentCross", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CrossDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Direction")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SegmentId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SegmentId");

                    b.HasIndex("TourId");

                    b.ToTable("SegmentCrosses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CrossDate = new DateTime(2021, 10, 30, 13, 59, 16, 382, DateTimeKind.Local).AddTicks(1760),
                            Direction = true,
                            ImageName = "preluki.jpg",
                            Order = 1,
                            SegmentId = 1,
                            TourId = 1
                        },
                        new
                        {
                            ID = 2,
                            CrossDate = new DateTime(2021, 10, 30, 15, 11, 16, 382, DateTimeKind.Local).AddTicks(3017),
                            Direction = true,
                            ImageName = "mikow.jpg",
                            Order = 2,
                            SegmentId = 2,
                            TourId = 1
                        },
                        new
                        {
                            ID = 3,
                            CrossDate = new DateTime(2021, 10, 30, 16, 20, 16, 382, DateTimeKind.Local).AddTicks(3038),
                            Direction = true,
                            ImageName = "jaworne.jpg",
                            Order = 3,
                            SegmentId = 3,
                            TourId = 1
                        },
                        new
                        {
                            ID = 4,
                            CrossDate = new DateTime(2021, 10, 30, 17, 59, 16, 382, DateTimeKind.Local).AddTicks(3044),
                            Direction = true,
                            ImageName = "rabia.jpg",
                            Order = 4,
                            SegmentId = 4,
                            TourId = 1
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.Tour", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BadgeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TouristEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("BadgeTypeId");

                    b.HasIndex("TouristEmail");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BadgeTypeId = 1,
                            CreationDate = new DateTime(2021, 10, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            EndDate = new DateTime(2021, 10, 30, 17, 59, 16, 381, DateTimeKind.Local).AddTicks(6308),
                            StartDate = new DateTime(2021, 10, 30, 13, 12, 16, 381, DateTimeKind.Local).AddTicks(2320),
                            TouristEmail = "tourist@localhost"
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.TourVerification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LeaderEmail")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("TourVerificationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("LeaderEmail");

                    b.HasIndex("TourId");

                    b.HasIndex("TourVerificationStatusId");

                    b.ToTable("TourVerifications");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            TourId = 1,
                            TourVerificationStatusId = 1,
                            VerificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.TourVerificationStatus", b =>
                {
                    b.Property<int>("TourVerificationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TourVerificationStatusId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TourVerificationStatuses");

                    b.HasData(
                        new
                        {
                            TourVerificationStatusId = 1,
                            Name = "Zgloszona"
                        },
                        new
                        {
                            TourVerificationStatusId = 2,
                            Name = "Zaakceptowana"
                        },
                        new
                        {
                            TourVerificationStatusId = 3,
                            Name = "Odrzucona"
                        },
                        new
                        {
                            TourVerificationStatusId = 4,
                            Name = "DoPonownegoRozpatrzenia"
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.Tourist", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disability")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Email");

                    b.ToTable("Tourists");

                    b.HasData(
                        new
                        {
                            Email = "tourist@localhost",
                            BirthDate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disability = false,
                            FirstName = "Jan",
                            LastName = "Kowalski"
                        });
                });

            modelBuilder.Entity("GOTPlaner.Models.TouristPoint", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ElementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MountainRangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("ElementTypeId");

                    b.HasIndex("MountainRangeId");

                    b.HasIndex("Name", "MountainRangeId")
                        .IsUnique();

                    b.ToTable("TouristPoints");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ElementTypeId = 1,
                            MountainRangeId = 4,
                            Name = "Dyszowa"
                        },
                        new
                        {
                            ID = 2,
                            ElementTypeId = 1,
                            MountainRangeId = 4,
                            Name = "Prełuki"
                        },
                        new
                        {
                            ID = 3,
                            ElementTypeId = 1,
                            MountainRangeId = 4,
                            Name = "Mików"
                        },
                        new
                        {
                            ID = 4,
                            ElementTypeId = 1,
                            MountainRangeId = 4,
                            Name = "Jaworne"
                        },
                        new
                        {
                            ID = 5,
                            ElementTypeId = 1,
                            MountainRangeId = 4,
                            Name = "Rabia Skała"
                        },
                        new
                        {
                            ID = 6,
                            ElementTypeId = 1,
                            MountainRangeId = 4,
                            Name = "Chmiel"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GOTPlaner.Models.Badge", b =>
                {
                    b.HasOne("GOTPlaner.Models.BadgeType", "BadgeType")
                        .WithMany("Badges")
                        .HasForeignKey("BadgeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOTPlaner.Models.Tourist", "Tourist")
                        .WithMany("Badges")
                        .HasForeignKey("TouristEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BadgeType");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("GOTPlaner.Models.CloseSegment", b =>
                {
                    b.HasOne("GOTPlaner.Models.Segment", "Segment")
                        .WithMany("SegmentCloses")
                        .HasForeignKey("SegmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("GOTPlaner.Models.LeaderPermission", b =>
                {
                    b.HasOne("GOTPlaner.Models.Leader", "Leader")
                        .WithMany("LeaderPermissions")
                        .HasForeignKey("LeaderEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOTPlaner.Models.MountainGroup", "MountainGroup")
                        .WithMany("LeaderPermissions")
                        .HasForeignKey("MountainGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");

                    b.Navigation("MountainGroup");
                });

            modelBuilder.Entity("GOTPlaner.Models.Segment", b =>
                {
                    b.HasOne("GOTPlaner.Models.ElementType", "ElementType")
                        .WithMany("Segments")
                        .HasForeignKey("ElementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOTPlaner.Models.TouristPoint", "TouristPointA")
                        .WithMany("SegmentsA")
                        .HasForeignKey("TouristPointAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOTPlaner.Models.TouristPoint", "TouristPointB")
                        .WithMany("SegmentsB")
                        .HasForeignKey("TouristPointBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElementType");

                    b.Navigation("TouristPointA");

                    b.Navigation("TouristPointB");
                });

            modelBuilder.Entity("GOTPlaner.Models.SegmentCross", b =>
                {
                    b.HasOne("GOTPlaner.Models.Segment", "Segment")
                        .WithMany("SegmentCrosses")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOTPlaner.Models.Tour", "Tour")
                        .WithMany("SegmentCrosses")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Segment");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("GOTPlaner.Models.Tour", b =>
                {
                    b.HasOne("GOTPlaner.Models.BadgeType", "BadgeType")
                        .WithMany("Tours")
                        .HasForeignKey("BadgeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOTPlaner.Models.Tourist", "Tourist")
                        .WithMany("Tours")
                        .HasForeignKey("TouristEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BadgeType");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("GOTPlaner.Models.TourVerification", b =>
                {
                    b.HasOne("GOTPlaner.Models.Leader", "Leader")
                        .WithMany("TourVerifications")
                        .HasForeignKey("LeaderEmail");

                    b.HasOne("GOTPlaner.Models.Tour", "Tour")
                        .WithMany("TourVerifications")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOTPlaner.Models.TourVerificationStatus", "Status")
                        .WithMany("TourVerifications")
                        .HasForeignKey("TourVerificationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");

                    b.Navigation("Status");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("GOTPlaner.Models.TouristPoint", b =>
                {
                    b.HasOne("GOTPlaner.Models.ElementType", "ElementType")
                        .WithMany()
                        .HasForeignKey("ElementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOTPlaner.Models.MountainRange", "MountainRange")
                        .WithMany()
                        .HasForeignKey("MountainRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElementType");

                    b.Navigation("MountainRange");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GOTPlaner.Models.BadgeType", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("GOTPlaner.Models.ElementType", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("GOTPlaner.Models.Leader", b =>
                {
                    b.Navigation("LeaderPermissions");

                    b.Navigation("TourVerifications");
                });

            modelBuilder.Entity("GOTPlaner.Models.MountainGroup", b =>
                {
                    b.Navigation("LeaderPermissions");
                });

            modelBuilder.Entity("GOTPlaner.Models.Segment", b =>
                {
                    b.Navigation("SegmentCloses");

                    b.Navigation("SegmentCrosses");
                });

            modelBuilder.Entity("GOTPlaner.Models.Tour", b =>
                {
                    b.Navigation("SegmentCrosses");

                    b.Navigation("TourVerifications");
                });

            modelBuilder.Entity("GOTPlaner.Models.TourVerificationStatus", b =>
                {
                    b.Navigation("TourVerifications");
                });

            modelBuilder.Entity("GOTPlaner.Models.Tourist", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("GOTPlaner.Models.TouristPoint", b =>
                {
                    b.Navigation("SegmentsA");

                    b.Navigation("SegmentsB");
                });
#pragma warning restore 612, 618
        }
    }
}
